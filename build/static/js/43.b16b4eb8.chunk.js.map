{"version":3,"sources":["views/UserPages/Change.js","containers/ChangeAppntmnt.js"],"names":["EditableContext","React","createContext","EditableRow","index","props","Form","useForm","form","component","Provider","value","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","useState","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","a","validateFields","values","console","log","childNode","Item","style","margin","name","rules","required","message","ref","onPressEnter","onBlur","className","paddingRight","onClick","EditableTable","handleDelete","key","dataSource","state","setState","filter","item","handleAdd","count","newData","age","address","row","findIndex","splice","columns","width","render","_","length","onConfirm","icon","faTrashAlt","time","this","components","body","cell","map","col","onCell","rowClassName","bordered","type","faCalendar","Component","DashboardPage","UserLayout","Change"],"mappings":"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","file":"static/js/43.b16b4eb8.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport { Table, Input, Button, Popconfirm, Form } from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCalendar } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst handleLogin = () => {\r\n  console.log(\"CAlled\");\r\n};\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log(\"Save failed:\", errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\n// const [primary, setPrimary] = useState(false);\r\n// const history = useHistory();\r\n// const history1 = useHistory();\r\n\r\n// const handleLogin = () => {\r\n//   history.push(\"/plan\");\r\n// };\r\nclass EditableTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.columns = [\r\n      {\r\n        title: \"Name\",\r\n        dataIndex: \"name\",\r\n        width: \"30%\",\r\n        editable: true,\r\n      },\r\n      {\r\n        title: \"Age\",\r\n        dataIndex: \"age\",\r\n      },\r\n      {\r\n        title: \"Location\",\r\n        dataIndex: \"address\",\r\n      },\r\n      {\r\n        title: \"Time Slot\",\r\n        dataIndex: \"time\",\r\n      },\r\n      {\r\n        title: \"Operation\",\r\n        dataIndex: \"operation\",\r\n        render: (_, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <Popconfirm\r\n              title=\"Sure to delete?\"\r\n              onConfirm={() => this.handleDelete(record.key)}\r\n            >\r\n              <a>\r\n                Delete\r\n                <FontAwesomeIcon icon={faTrashAlt} />\r\n              </a>\r\n            </Popconfirm>\r\n          ) : null,\r\n      },\r\n    ];\r\n    this.state = {\r\n      dataSource: [\r\n        {\r\n          key: \"0\",\r\n          name: \"Anushka Bhatnagar\",\r\n          age: \"24\",\r\n          address: \"Nursing Home - Alpha\",\r\n          time: \"12:00-12:40\",\r\n        },\r\n        {\r\n          key: \"1\",\r\n          name: \"Tom Brown\",\r\n          age: \"32\",\r\n          address: \"Clinic - A123\",\r\n          time: \"18:00-19:00\",\r\n        },\r\n        {\r\n          key: \"2\",\r\n          name: \"Edward King\",\r\n          age: \"65\",\r\n          address: \"Royal blue Hospital\",\r\n          time: \"10:00-10:30\",\r\n        },\r\n      ],\r\n      count: 2,\r\n    };\r\n  }\r\n\r\n  handleDelete = (key) => {\r\n    const dataSource = [...this.state.dataSource];\r\n    this.setState({\r\n      dataSource: dataSource.filter((item) => item.key !== key),\r\n    });\r\n  };\r\n  handleAdd = () => {\r\n    const { count, dataSource } = this.state;\r\n    const newData = {\r\n      key: count,\r\n      name: `Edward King ${count}`,\r\n      age: \"32\",\r\n      address: `London, Park Lane no. ${count}`,\r\n    };\r\n    this.setState({\r\n      dataSource: [...dataSource, newData],\r\n      count: count + 1,\r\n    });\r\n  };\r\n\r\n  handleSave = (row) => {\r\n    const newData = [...this.state.dataSource];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    this.setState({\r\n      dataSource: newData,\r\n    });\r\n  };\r\n\r\n  // handleLogin = () => {\r\n  //   history = useHistory();\r\n\r\n  //   history.push(\"/login\");\r\n  // };\r\n\r\n  render() {\r\n    const { dataSource } = this.state;\r\n    const components = {\r\n      body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n    const columns = this.columns.map((col) => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n\r\n      return {\r\n        ...col,\r\n        onCell: (record) => ({\r\n          record,\r\n          editable: col.editable,\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          handleSave: this.handleSave,\r\n        }),\r\n      };\r\n    });\r\n    return (\r\n      <div>\r\n        <Table\r\n          components={components}\r\n          rowClassName={() => \"editable-row\"}\r\n          bordered\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n        />\r\n        {/* <EditableTable />, */}\r\n        {/* <div className=\"col-md-4\">\r\n          <Button type=\"primary\" onClick={handleLogin()}>\r\n            Book an appointment\r\n          </Button>\r\n        </div> */}\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\"></div>\r\n          <div className=\"col-md-4\">\r\n            <center>\r\n              <Button type=\"primary\" onClick={handleLogin()}>\r\n                <FontAwesomeIcon icon={faCalendar} /> Book an new appointment\r\n              </Button>\r\n            </center>\r\n          </div>\r\n\r\n          <div className=\"col-md-4\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default EditableTable;\r\n","import React from \"react\";\r\nimport UserLayout from \"../containers/UserLayout\";\r\nimport Change from \"../views/UserPages/Change\";\r\n\r\nconst DashboardPage = () => {\r\n  return (\r\n    <UserLayout>\r\n      <div className=\"margin-top\">\r\n        <Change />{\" \"}\r\n      </div>\r\n    </UserLayout>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;\r\n"],"sourceRoot":""}